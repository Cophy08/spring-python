 -----
 Spring Python Site
 -----
 The Spring Python Team
 -----

Introduction

  "Spring Python is an offshoot of the Java-based Spring Framework and Spring Security, targeted for Python. Spring
  provides many useful features, and I wanted those same features available when working with Python." -- Greg Turnquist,
  project lead

  This project takes the concepts of Spring and applies it to the language and environment of Python. This includes
  pragmatic libraries and useful abstractions that quickly gets you back to working on the code that makes you money.

Key Features

    * {{{reference/html/objects.html}Inversion Of Control}} - The idea is to decouple two classes at the
    interface level. This lets you build many reusable parts in your software, and your whole application becomes
    more pluggable. You can use XMLConfig, PythonConfig/@Object, PyContainerConfig, or SpringJavaConfig, allowing you
    to read multiple formats.	

    * {{{reference/html/aop.html}Aspect-oriented Programming}} - Spring Python provides great ways to wrap advice
    around objects. It is utilized for remoting. Another use is for debug tracers and performance tracing.	

    * {{{reference/html/dao.html}Data Access}} - Reading from the database requires a monotonous cycle of opening
    cursors, reading rows, and closing cursors, along with exception handlers. With this template class, all you
    need is the SQL query and row-handling function. Spring Python does the rest.

    * {{{reference/html/transaction.html}Transaction Management}} - Wrapping multiple database calls with
    transactions can make your code hard to read. This module provides multiple ways to define transactions without
    making things complicated.

    * {{{reference/html/security.html}Security}} - Plugin security interceptors to lock down access to your methods,
    utilizing both authentication and domain authorization.

    * {{{reference/html/remoting.html}Remoting}} - It is easy to convert your local application into a distributed
    one. If you have already built your client and server pieces using the IoC container, then going from local to
    distributed is just a configuration change.

    * {{{reference/html/samples.html}Samples}} - to help demonstrate various features of Spring Python, some sample
    applications have been created:

          * {{{reference/html/samples.html#samples-petclinic}PetClinic}} - Everybody's favorite Spring
          	sample application has been rebuilt from the ground up using various web containers
			including: CherryPy. Go check it out for an example of how to use this framework.
			
          * {{{reference/html/samples.html#samples-springwiki}Spring Wiki}} - Wikis are powerful ways
          	to store and manage	content, so we created a simple one as a demo!
          	
          * {{{reference/html/samples.html#samples-springbot}Spring Bot}} - Use Spring Python to build
          	a tiny bot to manage the IRC channel of your open source project. 
			
Downloads

  {{{http://www.springsource.com/download/community?project=Spring%20Extensions}Official releases}}

What's Coming?

  We are working on creating a fluent DSL for configuring the IoC container. With a refactored core container
  that already supports four formats, it shouldn't be hard to extend things and offer a useful, succinct
  alternative. The import thing is that with Spring Python, you don't HAVE to get bogged down with XML.

  We are also developing a {{{reference/html/plugins.html}plugin-based, command-line tool}} to help you utilize Spring Python in writing applications.

Spring Python News

  Visit {{{http://blog.springpython.webfactional.com}Spring Python's blog site}} for news, postings, and
  other up-to-the-minute information.
  

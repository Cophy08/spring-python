<?xml version="1.0" encoding="UTF-8"?>
<chapter id="aop">
	<title>Aspect Oriented Programming</title>
	
	<para><emphasis>Aspect oriented programming</emphasis> (AOP) is a horizontal
	programming paradigm, where some type of behavior is applied to several classes
	that don't share the same vertical, object-oriented inheritance. In AOP, programmers
	implement these <emphasis>cross cutting concerns</emphasis> by writing an
	<emphasis>aspect</emphasis> then applying it  conditionally based on a <emphasis>join
	point</emphasis>. This is referred to as applying <emphasis>advice</emphasis>. This
	section shows how to use the AOP module of Spring Python.</para>

      <section id="aop-dependencies">
          <title>External dependencies</title>
          <para>
              Spring Python's AOP itself doesn't require any special external
              libraries to work however the IoC configuration format of your choice,
              unless you use PythonConfig, will likely need some. Refer
              to the <link linkend="objects-dependencies">IoC documentation</link> for more details.
          </para>
      </section>
    
	<section id="aop-interceptors">
		<title>Interceptors</title>
		
		<para>Spring Python implements AOP advice using <emphasis>proxies</emphasis> and
		<emphasis>method interceptors</emphasis>. NOTE: Interceptors only apply to method
		calls. Any request for attributes are passed directly to the target without AOP
		intervention.</para>

		<para>Here is a sample service. Our goal is to wrap the results with "wrapped" tags,
		without modifying the service's code.</para>
		
<programlisting><![CDATA[
class SampleService:
    def method(self, data):
        return "You sent me '%s'" % data
    def doSomething(self):
        return "Okay, I'm doing something"
]]></programlisting>

		<para>If we instantiate and call this service directly, the results are straightforward.</para>

<programlisting><![CDATA[
service = SampleService()
print service.method("something")

"You sent me 'something'"
]]></programlisting>

		<para>To configure the same thing using the IoC container, put the following text into a file named
		<filename>app-context.xml</filename>.</para>
		
<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<objects xmlns="http://www.springframework.org/springpython/schema/objects/1.1"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/springpython/schema/objects/1.1
       		http://springpython.webfactional.com/schema/context/spring-python-context-1.1.xsd">
       		
	<object id="service" class="SampleService"/>
	
</objects>
]]></programlisting>

		<para>To instantiate the IoC container, use the following code.</para>
		
<programlisting><![CDATA[
from springpython.context import ApplicationContext
from springpython.config import XMLConfig

container = ApplicationContext(XMLConfig("app-context.xml"))
service = container.get_object("service")
]]></programlisting>

		<para>You can use either mechanism to define an instance of your service. Now, let's write an interceptor
		that will catch any results, and wrap them with <![CDATA[<Wrapped>]]> tags.</para>
		
<programlisting><![CDATA[
from springpython.aop import *
class WrappingInterceptor(MethodInterceptor):
    def invoke(self, invocation):
        results = "<Wrapped>" + invocation.proceed() + "</Wrapped>"
        return results
]]></programlisting>

		<para><methodname>invoke(self, invocation)</methodname> is a dispatching method defined
		abstractly in the <classname>MethodInterceptor</classname> base class. <methodname>invocation
		</methodname> holds the target method name, any input arguments, and also the callable
		target function. In this case, we aren't interested in the method name or the arguments.
		So we call the actual function using <methodname>invocation.proceed()</methodname>, and than
		catch its results. Then we can manipulate these results, and return them back to the caller.</para> 

		<para>In order to apply this advice to a service, a stand-in <emphasis>proxy</emphasis>
		must be created and given to the client. One way to create this is by creating a 
		<classname>ProxyFactory</classname>. The factory is used to identify the target service
		that is being intercepted. It is used to create the dynamic proxy object to give back to
		the client.</para>
		
		<para>You can use the Spring Python APIs to directly create this proxied service.</para>
		
<programlisting><![CDATA[
from springpython.aop import *
factory = ProxyFactory()
factory.target = SampleService()
factory.interceptors.append(WrappingInterceptor())
service = factory.getProxy()
]]></programlisting>

		<para>Or, you can insert this definition into your <filename>app-context.xml</filename> file.</para>
		
<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<objects xmlns="http://www.springframework.org/springpython/schema/objects/1.1"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/springpython/schema/objects/1.1
       		http://springpython.webfactional.com/schema/context/spring-python-context-1.1.xsd">
       		
	<object id="targetService" class="SampleService"/>

	<object id="serviceFactory" class="springpython.aop.ProxyFactory">
		<property name="target" ref="targetService"/>
		<property name="interceptors">
			<object class="WrappingInterceptor"/>
		</property>
	</object>
	
</objects>
]]></programlisting>

		<para>If you notice, the original Spring Python "service" object has been renamed as "targetService", and there is, instead,
		another object called "serviceFactory" which is a Spring AOP ProxyFactory. It points to the target service and also has an
		interceptor plugged in. In this case, the interceptor is defined as an inner object, not having a name of its own,
		indicating it is not meant to be referenced outside the IoC container. When you get a hold of this, you can request a proxy.</para>

<programlisting><![CDATA[
from springpython.context import ApplicationContext
from springpython.config import XMLConfig

container = ApplicationContext(XMLConfig("app-context.xml"))
serviceFactory = container.get_object("serviceFactory")
service = serviceFactory.getProxy()
]]></programlisting>

		<para>Now, the client can call <emphasis>service</emphasis>, and all function calls will
		be routed to <classname>SampleService</classname> with one simple detour through
		<classname>WrappingInterceptor</classname>.</para>

<programlisting><![CDATA[
print service.method("something")

"<Wrapped>You sent me 'something'</Wrapped>"
]]></programlisting>

		<para>Notice how I didn't have to edit the original service at all? I didn't even
		have to introduce Spring Python into that module. Thanks to the power of Python's
		dynamic nature, Spring Python AOP gives you the power to wrap your own source code
		as well as other 3rd party modules.</para>
		
	</section>
	
	<section id="aop-proxy-factory-objects">
		<title>Proxy Factory Objects</title>
		
		<para>The earlier usage of a <classname>ProxyFactory</classname> is useful, but often
		times we only need the factory to create one proxy. There is a shortcut called
		<classname>ProxyFactoryObject</classname>.</para>
		
<programlisting><![CDATA[
from springpython.aop import *
service = ProxyFactoryObject()
service.target = SampleService()
service.interceptors = [WrappingInterceptor()]
print service.method(" proxy factory object")

"You sent me a 'proxy factory object'"
]]></programlisting>

		<para>To configure the same thing into your <filename>app-context.xml</filename> file, it looks like this:</para>

<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<objects xmlns="http://www.springframework.org/springpython/schema/objects/1.1"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/springpython/schema/objects/1.1
       		http://springpython.webfactional.com/schema/context/spring-python-context-1.1.xsd">
       		
	<object id="targetService" class="SampleService"/>

	<object id="service" class="springpython.aop.ProxyFactoryObject">
		<property name="target" ref="targetService"/>
		<property name="interceptors">
			<object class="WrappingInterceptor"/>
		</property>
	</object>
	
</objects>
]]></programlisting>

		<para>In this case, the <classname>ProxyFactoryObject</classname> acts as both a proxy
		and a factory. As a proxy, it behaves just like the target service would, and it also provides
		the ability to wrap the service with aspects. It saved us a step of coding, but more importantly,
		the <classname>ProxyFactoryObject</classname> took on the persona of being our service
		right from the beginning.</para>

		<para>To be more pythonic, Spring Python also allows you to initialize everything at once.</para>
		
<programlisting><![CDATA[
from springpython.aop import *
service = ProxyFactoryObject(target = SampleService(), interceptors = [WrappingInterceptor()])
]]></programlisting>

	</section>
	
	<section id="aop-pointcuts">
		<title>Pointcuts</title>
		
		<para>Sometimes we only want to apply advice to certain methods. This requires
		definition of a <emphasis>join point</emphasis>. Join points are composed of rules
		referred to as <emphasis>point cuts</emphasis>.</para>

		<para>In this case, we want to only apply our <classname>WrappingInterceptor</classname>
		to methods that start with "do".</para>
		
<programlisting><![CDATA[
from springpython.aop import *
pointcutAdvisor = RegexpMethodPointcutAdvisor(advice = [WrappingInterceptor()], patterns = [".*do.*"])
service = ProxyFactoryObject(target = SampleService(), interceptors = pointcutAdvisor)
print service.method("nothing changed here")

"You sent me 'nothing changed here'"

print service.doSomething()

"<Wrapped>Okay, I'm doing something</Wrapped"
]]></programlisting>

		<note>
			<title>The power of <classname>RegexpMethodPointAdvisor</classname></title>
			
			<para><classname>RegexpMethodPointAdvisor</classname> is a powerful object in
			Spring Python that acts as <emphasis>pointcut</emphasis>, a <emphasis>join point</emphasis>,
			and a <emphasis>method interceptor</emphasis>. It fetches the fullpath of the target's
			module, class, and method name, and then checks to see if it matches any of the patterns
			in the <emphasis>patterns</emphasis> list using Python's regular expression module.</para>
		</note>

		<para>By plugging this into a <classname>ProxyFactoryObject</classname> as an interceptor, it evaluates
		whether to route method calls through the advice, or directly to the target service.</para>

	</section>
	
	<section id="aop-interceptor-chain">
		<title>Interceptor Chain</title>
		
		<para>You may have noticed by now that the <classname>WrappingInterceptor</classname>
	 	is being specified inside a Python list. That is because you can apply more than one piece of advice.
		When an interceptor calls <methodname>invocation.proceed()</methodname>, it is actually
		calling the next interceptor in the chain, until it gets to the end. Then it calls
		the actual target service. When the target method returns back, everything backtracks
		back out the set of nested interceptors.</para>

		<para>Spring Python is coded to intelligently detect if you are assigning a single
		interceptor to the <emphasis>interceptors</emphasis> property, or a list. A single
		interceptor gets converted into a list of one. So, you can do either of the following:</para>
		
<programlisting><![CDATA[
service = ProxyFactoryObject()
service.interceptors = WrappingInterceptor()
]]></programlisting>

or

<programlisting><![CDATA[
service = ProxyFactoryObject()
factory.interceptors = [WrappingInterceptor()]
]]></programlisting>

It produces the same thing.

	</section>
	
	<section id="aop-pure-python">
	    <title>Coding AOP with Pure Python</title>
	    
	    <para>There is a long history of Spring being based on XML. However, Spring Python offers an easy to use alternative: a
	    <link linkend="objects-config-object">pure python decorator-based PythonConfig</link>. Imagine you had set up a simple
	    context like this:</para>
	    
<programlisting><![CDATA[
from springpython.config import *
from springpython.context import *

class MovieBasedApplicationContext(PythonConfig):
    def __init__(self):
        super(MovieBasedApplicationContext, self).__init__()
        
    @Object(scope.PROTOTYPE)
    def MovieLister(self):
        lister = MovieLister()
        lister.finder = self.MovieFinder()
        lister.description = self.SingletonString()
        self.logger.debug("Description = %s" % lister.description)
        return lister
    
    @Object(scope.SINGLETON)
    def MovieFinder(self):
        return ColonMovieFinder(filename="support/movies1.txt")
    
    @Object    # scope.SINGLETON is the default
    def SingletonString(self):
        return StringHolder("There should only be one copy of this string")
]]></programlisting>

        <para>From an AOP perspective, it is easy to intercept <classname>MovieFinder</classname> and wrap it with some
        advice. Because you have already exposed it as an injection point with this pure-python IoC container, you just need
        to make this change:</para>
        
<programlisting><![CDATA[
from springpython.aop import *
from springpython.config import *
from springpython.context import *

class MovieBasedApplicationContext(PythonConfig):
    def __init__(self):
        super(MovieBasedApplicationContext, self).__init__()
        
    @Object(scope.PROTOTYPE)
    def MovieLister(self):
        lister = MovieLister()
        lister.finder = self.MovieFinder()
        lister.description = self.SingletonString()
        self.logger.debug("Description = %s" % lister.description)
        return lister
    
    # By renaming the original service to this...
    def targetMovieFinder(self):
        return ColonMovieFinder(filename="support/movies1.txt")

    #...we can substitute a proxy that will wrap it with an interceptor
    @Object(scope.SINGLETON)
    def MovieFinder(self):
    	return ProxyFactoryObject(target=self.targetMovieFinder(), 
                                 interceptors=MyInterceptor())
    
    
    @Object    # scope.SINGLETON is the default
    def SingletonString(self):
        return StringHolder("There should only be one copy of this string")

class MyInterceptor(MethodInterceptor):
    def invoke(self, invocation):
        results = "<Wrapped>" + invocation.proceed() + "</Wrapped>"
        return results
]]></programlisting>

        <para>Now, everything that was referring to the original <classname>ColonMovieFinder</classname> instance, is instead pointing
        to a wrapping interceptor. The caller and callee involved don't know anything about it, keeping your code isolated and clean.</para>
        
        <note>
            <title>Shouldn't you decouple the interceptor from the IoC configuration?</title>
            
            <para>It is usually good practice to split up configuration from actual business code. These two
            were put together in the same file for demonstration purposes.</para>
        </note>
	    
	</section>

</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<chapter id="plugins">
	<title>Spring Python's plugin system</title>
	
	<para>Spring Python's plugin system is designed to help you rapidly develop applications.
	Plugin-based solutions have been proven to enhance developer efficiency, with examples such
	as <ulink url="http://grails.org/">Grails</ulink> and <ulink url="http://eclipse.org">Eclipse</ulink>
	being market leaders in usage and productivity.</para>
	
	<para>This plugin solution was mainly inspired by the Grails demo presented by Graeme Rocher at the
	SpringOne Americas 2008 conference, in which he created a Twitter application in 40 minutes. Who
	wouldn't want to have something similar to support Spring Python development?</para>
		
	<section id="intro">
		<title>Introduction</title>
	
		<sidebar id="intro-spring-extensions">
			<title>Have you considered submitting your plugin as a Spring Extension?</title>
			
			<para><ulink url="http://www.springsource.org/extensions">Spring Extensions</ulink>
			is the official incubator process for SpringSource. You can always maintain your own plugin
			separately, using whatever means you wish. But if want to get a larger adoption of your
			plugin, name association with SpringSource, and perhaps one day becoming an official part of
			the software suite of SpringSource, you may want to consider looking into the Spring Extensions process.</para>
		</sidebar>

		<para>Spring Python will manage an approved set of plugins. These are plugins written by
		the committers of Spring Python and are verified to work with an associated version
		of the library. These plugins are also hosted by the same services used to host Spring
		Python downloads, meaning they have the same level of support as Spring Python.</para>
		
		<para>However, being an open source framework, developers have every right to code their
		own plugins. We fully support the concept of 3rd party plugins. We want to provide as much
		support in the way of documentation and extension points for you to develop your own plugins
		as well.</para>
		
	</section>
	
	<section id="coily">
		<title>Coily - Spring Python's command-line tool</title>
		
		<para>Coily is the command-line tool that utilizes the plugin system. It is similar to
		grails command-line tool, in that through a series of installed plugins, you are able
		to do many tasks, including build skeleton apps that you can later flesh out. If you 
		look at the details of this app, you will find a sophisticated, command driven
		tool to built to manage plugins. The real power is in the plugins themselves.</para>
		
		<section id="coily-commands">
			<title>Commands</title>
			
			<para>To get started, all you need is a copy of coily installed in some directory
			located on your path.</para>
			
<programlisting><![CDATA[
% coily --help
]]></programlisting>

			<para>The results should list available commands.</para>
			
<programlisting><![CDATA[
Coily - the command-line management tool for Spring Python
==========================================================
Copyright 2006-2008 SpringSource (http://springsource.com), All Rights Reserved
Licensed under the Apache License, Version 2.0


Usage: coily [command]

        --help                          print this help message
        --list-installed-plugins        list currently installed plugins
        --list-available-plugins        list plugins available for download
        --install-plugin [name]         install coily plugin
        --uninstall-plugin [name]       uninstall coily plugin
        --reinstall-plugin [name]       reinstall coily plugin
        
]]></programlisting>

			<itemizedlist>
			
				<listitem>
					<para>--help - Print out the help menu being displayed</para>
				</listitem>
				
				<listitem>
					<para>--list-installed-plugins - list the plugins currently installed in this
					account. It is important to know that each plugin creates a directly underneath
					the user's home directory in a hidden directory <filename>.springpython</filename>.
					If you delete this entire directory, you have effectively uninstalled all plugins.</para>
				</listitem>
				
				<listitem>
					<para>--list-available-plugins - list the plugins available for installation.
					Coily will check certain network locations, such as the S3 site used to host Spring
					Python downloads. It will also look on the local file system. This is in case you
					have a checked out copy of the plugins source code, and want to test things out
					without uploading to the network.</para>
				</listitem>
				
				<listitem>
					<para>--install-plugin - install the named plugin. In this case, you don't have to
					specify a version number. Coily will figure out which version of the plugin you
					need, download it if necessary, and finally copy it into
					<filename>~/.springpython</filename>.</para>
				</listitem>
				
				<listitem>
					<para>--uninstall-plugin - uninstall the named plugin by deleting its entry from
					<filename>~/.springpython</filename></para>
				</listitem>
				
				<listitem>
					<para>--reinstall-plugin - uninstall then install the plugin. This is particulary
					useful if you are working on a plugin, and need a shortcut step to deploy.</para>
				</listitem>
			
			</itemizedlist>

			<para>In this case, no plugins have been installed yet. Every installed plugin will
			list itself as another available command to run. If you have already installed the
			<emphasis>gen-cherrypy-app</emphasis> plugin, you will see it listed.</para>
			
<programlisting><![CDATA[
Coily - the command-line management tool for Spring Python
==========================================================
Copyright 2006-2008 SpringSource (http://springsource.com), All Rights Reserved
Licensed under the Apache License, Version 2.0


Usage: coily [command]

        --help                          print this help message
        --list-installed-plugins        list currently installed plugins
        --list-available-plugins        list plugins available for download
        --install-plugin [name]         install coily plugin
        --uninstall-plugin [name]       uninstall coily plugin
        --reinstall-plugin [name]       reinstall coily plugin
        --gen-cherrypy-app [name]       plugin to create skeleton CherryPy applications
        
]]></programlisting>

			<para>You should notice an extra option listed at the bottom: <emphasis>gen-cherrypy-app</emphasis>
			is listed as another command with one argument. Later on, you can read official documentation
			on the existing plugins, and also how to write your own.</para>
			
		</section>
		
	</section>

	<section id="official-plugins">
		<title>Officially Supported Plugins</title>
		
		<para>This section documents plugins that are developed by the Spring Python team.</para>
		
		<section id="gen-cherrypy-app">
			<title>gen-cherrypy-app</title>
			
			<para>This plugin is used to generate a skeleton <ulink url="http://cherrypy.org">CherryPy</ulink>
			application based on feeding it a command-line argument.</para>
            
      <section id="plugins-dependencies">
          <title>External dependencies</title>
          <para>
              <emphasis>gen-cherrypy-app</emphasis> plugin requires the installation
              of <ulink url="http://cherrypy.org">CherryPy 3</ulink>.
          </para>
      </section>
            
			
<programlisting><![CDATA[
% coily --gen-cherrypy-app twitterclone
]]></programlisting>

			<para>This will generate a subdirectory <filename>twitterclone</filename> in the user's current
			directory. Inside twitterclone are several files, including <filename>twitterclone.py</filename>.
			If you run the app, you will see a working CherryPy application, with Spring Python security in
			place.</para>

<programlisting><![CDATA[
% cd twitterclone
% python twitterclone.py
]]></programlisting>
			
			<para>You can immediately start modifying it to put in your features.</para>

		</section>
	</section>
	
	<section id="custom-plugins">
		<title>Writing your own plugin</title>
		
		<section id="plugin-architecture">
			<title>Architecture of a plugin</title>
			
			<para>A plugin is pretty simple in structure. It is basically a python
			package with some special things added on. <emphasis>gen-cherrypy-app</emphasis>
			plugin demonstrates this.</para>
			
			<para><mediaobject>
				<imageobject role="fo">
					<imagedata align="center" fileref="images/gen-cherrypy-app-folder-struct.png"
						format="PNG" scale="100%" width="100%"/>
				</imageobject>
				<imageobject role="html">
					<imagedata align="center" fileref="images/gen-cherrypy-app-folder-struct.png"
						format="PNG"/>
				</imageobject>
			</mediaobject></para>
			
			<para>The special things needed to define a plugin are as follows:</para>
			
			<itemizedlist>
				<listitem><para>A root folder with the same name as your plugin and a
				<filename>__init__.py</filename>, making the plugin a python package</para></listitem>
				<listitem>
					<para>A package-level variable named <methodname>__description__</methodname></para>
					
					<para>This attribute should be assigned the string value description you want 
					shown for your plugin when coily --help is run.</para> 
				</listitem>
				<listitem>
					<para>A package-level function named either <methodname>create</methodname> or
					<methodname>apply</methodname></para>
					
					<itemizedlist>
						<listitem>
							<para>If your plugin needs one command line argument, define
							a <methodname>create</methodname> method with the following
							signature:</para>
<programlisting><![CDATA[
def create(plugin_path, name)
]]></programlisting>
						</listitem>
						<listitem>
							<para>If your plugin doesn't need any arguments, define
							an <methodname>apply</methodname> method with the following
							signature:</para>
<programlisting><![CDATA[
def apply(plugin_path)
]]></programlisting>
						</listitem>
					</itemizedlist>
					
					<para>In either case, your plugin gets passed an extra argument,
					<methodname>plugin_path</methodname>, which contains the directory the plugin
					is actually installed in. This is typically so you can reference other
					files your plugin needs access to.</para>
				</listitem>
			</itemizedlist>
			
			<note>
				<title>What does "package-level" mean?</title>
		
				<para>The code needs to be in the <filename>__init__.py</filename> file. This file
				makes the enclosing directory a python package.</para>
			</note>
			
		</section>
		
		<section id="casestudy">
			<title>Case Study - gen-cherrypy-app plugin</title>
			
			<para><emphasis>gen-cherrypy-app</emphasis> is a plugin used to build a
			<ulink url="http://cherrypy.org">CherryPy</ulink> web application using Spring Python's
			feature set. It saves the developer from having to re-configure Spring Python's security
			module, coding CherryPy's engine, and so forth. This allows the developer to immediately
			start writing business code against a working application.</para>
			
			<para>Using this plugin, we will de-construct this simple, template-based plugin. This
			will involve looking line-by-line at <filename>gen-cherrypy-app/__init__.py</filename>.</para>

			<section id="casestudy-original-source">
				<title>Source Code</title>
				
<programlisting><![CDATA[
"""
   Copyright 2006-2008 SpringSource (http://springsource.com), All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.       
"""
import re
import os
import shutil

__description__ = "plugin to create skeleton CherryPy applications"

def create(plugin_path, name):
    if not os.path.exists(name):
        print "Creating CherryPy skeleton app %s" % name
        os.makedirs(name)

        # Copy/transform the template files
        for file_name in ["cherrypy-app.py", "controller.py", "view.py", "app_context.py"]:
            input_file = open(plugin_path + "/" + file_name).read()

            # Iterate over a list of patterns, performing string substitution on the input file
            patterns_to_replace = [("name", name), ("properName", name[0].upper() + name[1:])]
            for pattern, replacement in patterns_to_replace:
                input_file = re.compile(r"\$\{%s}" % pattern).sub(replacement, input_file)

            output_filename = name + "/" + file_name
            if file_name == "cherrypy-app.py":
                output_filename = name + "/" + name + ".py"

            app = open(output_filename, "w")
            app.write(input_file)
            app.close()

        # Recursively copy other parts
        shutil.copytree(plugin_path + "/images", name + "/" + "images")
    else:
        print "There is already something called %s. ABORT!" % name

]]></programlisting>

			</section>
			
			<section id="casestudy-line-by-line">
				<title>Deconstructing the factory</title>

				<itemizedlist>
					<listitem>
						<para>The opening section shows the copyright statement, which should 
						tip you off that this is an official plugin.</para>
					</listitem>
					<listitem>
						<para><methodname>__description__</methodname> is a required variable.</para>
<programlisting><![CDATA[
__description__ = "plugin to create skeleton CherryPy applications"
]]></programlisting>
						<para>It contains the description displayed when a user runs:</para>
<programlisting><![CDATA[
% coily --help
]]></programlisting>

<programlisting><![CDATA[
Usage: coily [command]
...
        --gen-cherrypy-app [name]       plugin to create skeleton CherryPy applications
        
]]></programlisting>

					</listitem>
					<listitem>
						<para>Opening line defines <methodname>create</methodname> with two
						arguments.</para>
<programlisting><![CDATA[
def create(plugin_path, name):
]]></programlisting>
						<para>The arguments allow both the plugin path to be fed along with the
						command-line argument that is filled in when the user runs the command:</para>
					
<programlisting><![CDATA[
% coily --gen-cherrypy-app [name]
]]></programlisting>

						<para>It is important to realize that <methodname>plugin_path</methodname> is
						needed in case the plugin needs to refer to any files inside its installed
						directory. This is because plugins are not installed anywhere on the 
						<filename>PYTHONPATH</filename>, but instead, in the user's home directory
						underneath <filename>.springpython</filename>.</para>
						
						<para>This mechanism was chosen because it gives users an easy ability to pick
						which plugins they wish to use, without requiring system admin power. It also
						eliminates the need to deal with multiple versions of plugins being installed on
						your <filename>PYTHONPATH</filename>. This provides maximum flexibility which is
						needed in a development environment.</para>
	
					</listitem>
					<listitem>
						<para>This plugin works by creating a directory in the user's current working
						directory, and putting all relevant files into it. The argument passed into
						the command-line is used as the name of an application, and the directory
						created has the same name.</para>
					
<programlisting><![CDATA[
    if not os.path.exists(name):
        print "Creating CherryPy skeleton app %s" % name
        os.makedirs(name)
]]></programlisting>

						<para>However, if the directory already exists, it won't proceed.</para>

<programlisting><![CDATA[
    else:
        print "There is already something called %s. ABORT!" % name
]]></programlisting>

					</listitem>
					<listitem>
						<para>This plugin then iterates over a list of filenames, which happen to
						match the names of files found in the plugin's directory. These are
						essentially	template files, intended to be copied into the target
						directory. However, the files are not copied directly. Instead they are
						opened and read into memory.</para>
					
<programlisting><![CDATA[
        # Copy/transform the template files
        for file_name in ["cherrypy-app.py", "controller.py", "view.py", "app_context.py"]:
            input_file = open(plugin_path + "/" + file_name).read()
]]></programlisting>

						<para>Then, the contents are scanned for key phrases,
						and	substituted. In this case, the substitution is a variant of the name
						of the application being generated.</para>
					
<programlisting><![CDATA[
            # Iterate over a list of patterns, performing string substitution on the input file
            patterns_to_replace = [("name", name), ("properName", name[0].upper() + name[1:])]
            for pattern, replacement in patterns_to_replace:
                input_file = re.compile(r"\$\{%s}" % pattern).sub(replacement, input_file)
]]></programlisting>

						<para>The substituted content is written to a new output file. In most
						cases, the original filename is also the target filename. However, the key
						file, <filename>cherrypy-app.py</filename> is renamed to the application's
						name.</para>
					
<programlisting><![CDATA[
            output_filename = name + "/" + file_name
            if file_name == "cherrypy-app.py":
                output_filename = name + "/" + name + ".py"

            app = open(output_filename, "w")
            app.write(input_file)
            app.close()
]]></programlisting>

					</listitem>
					<listitem>
						<para>Finally, the images directory is recursively copied into the target
						directory.</para>
					
<programlisting><![CDATA[
        # Recursively copy other parts
        shutil.copytree(plugin_path + "/images", name + "/" + "images")
]]></programlisting>

					</listitem>
				</itemizedlist>
			</section>
			
			<section id="casestudy-summary">
				<title>Summary</title>
				
				<para>All these steps effectively copy a set of files used to template an
				application. With this template approach, the major effort of developing this
				plugin is spent working on the templates themselves, not on this template factory.
				While this is mostly working with python code for a python solution, the fact that this
				is a template requires reinstalling the plugin everytime a change is made in order to test
				them.</para>
			
				<para>Users are welcome to use <emphasis>gen-cherypy-app</emphasis>'s
				<filename>__init__.py</filename> file to generate their own template solutions, and
				work on other skeleton tools or solutions.</para>
				
			</section>			
			
		</section>
		
	</section>
</chapter>
